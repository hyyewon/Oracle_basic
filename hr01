show user;

-- 1. 모든 컬럼 보기
SELECT * FROM employees;

select *
from EMPLOYEES;

SELECT * FROM departments;
desc DEPARTMENTS;

-- 2. 특정 컬럼 보기 (Projection)
SELECT employee_id, last_name, hire_date, salary
FROM employees;

SELECT first_name
FROM employees;

-- 3. 연산을 사용하여 컬럼 보기
SELECT last_name, salary, salary * 12
FROM employees;

-- 4. 별칭 사용하여 컬럼 보기
SELECT last_name as 이름, salary 월급, salary * 12 as 연봉
FROM employees;

-- 5. 별칭의 공백은 " " 로!
SELECT last_name as "사원 이름", salary "사원 월급", salary * 12 as "연 봉"
FROM employees;

-- 6. null값이 있는 데이터와의 연산 결과값은 항상 null
SELECT last_name 이름, salary 월급, commission_pct 수수료,
 salary* 12+commission_pct as 연봉
FROM employees;

-- 7. NVL : null값을 치환할 때 사용
SELECT last_name 이름, salary 월급, commission_pct 수수료,
 salary * 12+NVL(commission_pct,0) as 연봉
FROM employees;

-- 8. 연결(||) : 컬럼 || 컬럼
SELECT last_name || salary as "이름 월급" FROM employees;

-- 8-1. 연결 : 컬럼 || '값'
SELECT last_name || ' 사원'
FROM employees;

SELECT last_name || '의 직업은 ' || job_id || ' 입니다' as "사원별 직급"
FROM employees;

-- 9. 중복제거
SELECT job_id
FROM employees;

SELECT DISTINCT job_id
FROM employees;

--////////////////////////////////////////////
-- 10. where 절의 비교 연산자
SELECT employee_id,last_name,job_id, salary
FROM employees
WHERE salary >= 10000;

SELECT employee_id,last_name,job_id, salary
FROM employees
WHERE last_name = 'King';
--SQL문의 식별자는 대소문자 구별 안하지만 값(리터럴)은 대소문자를 구별한다.
SELECT employee_id,last_name,job_id, salary
FROM employees
WHERE last_name = 'KING';

SELECT employee_id,last_name,salary,hire_date
FROM employees
WHERE hire_date > '07/12/31';

-- 11. Between a And b (값으로 입력된 범위 포함)
SELECT employee_id,last_name,salary,hire_date
FROM employees
WHERE salary BETWEEN 7000 AND 8000;

SELECT employee_id,last_name,salary,hire_date
FROM employees
WHERE hire_date BETWEEN '07/01/01' AND '08/12/31';

-- 12. in 연산자
SELECT employee_id,last_name,salary,hire_date
FROM employees
WHERE employee_id IN ( 100,200,300 );

SELECT employee_id,last_name,salary,hire_date
FROM employees
WHERE last_name IN ( 'King','Abel','Jones');

SELECT employee_id,last_name,salary,hire_date
FROM employees
WHERE hire_date IN ( '01/01/13','07/02/07');

-- 13.Like / wild card (%),(_)
SELECT employee_id,last_name,salary
FROM employees
WHERE last_name LIKE 'S%';

SELECT employee_id,last_name,salary
FROM employees
WHERE last_name LIKE '%ai%';

SELECT employee_id,last_name,salary
FROM employees
WHERE last_name LIKE '%in';

SELECT employee_id,last_name,salary
FROM employees
WHERE last_name LIKE '_b%';

SELECT employee_id, last_name, salary
FROM employees
WHERE last_name LIKE '_____d';

SELECT employee_id,last_name,salary
FROM employees
WHERE last_name LIKE '%_%';
-- 14. Escape '임의의 문자' 바로 뒤 한 글자는 일반 문자로 인식 
SELECT employee_id,last_name,salary,job_id
FROM employees
WHERE job_id LIKE '%E___' ESCAPE 'E';

-- 15. 논리연산자 (AND)
SELECT last_name,job_id,salary
FROM employees
WHERE job_id = 'IT_PROG' AND salary >= 5000;

-- 15. 논리연산자 (OR)
SELECT last_name,job_id,salary
FROM employees
WHERE job_id = 'IT_PROG' OR salary >= 5000;

-- 15. 논리연산자 (NOT)
SELECT last_name,job_id,salary
FROM employees
WHERE NOT salary < 20000;

SELECT last_name,job_id,salary
FROM employees
WHERE salary NOT IN (9000,8000,6000 );

SELECT last_name,job_id,salary
FROM employees
WHERE last_name NOT LIKE 'J%';

SELECT last_name,job_id,salary
FROM employees
WHERE salary NOT BETWEEN 2400 AND 20000;

-- 16. Is null 연산자
SELECT last_name,job_id,salary
FROM employees
WHERE commission_pct IS NULL;

SELECT last_name,job_id,salary
FROM employees
WHERE commission_pct IS NOT NULL;

SELECT last_name,job_id,salary
FROM employees
WHERE MANAGER_ID IS NULL; -- 사장

SELECT last_name,job_id,salary
FROM employees
WHERE MANAGER_ID IS NOT NULL;

-- 17. 논리연산자 우선순위 : AND 가 OR 보다 우선순위가 높음
SELECT last_name,job_id,salary,commission_pct
FROM employees
WHERE job_id ='AC_MGR' OR job_id='MK_REP'
AND commission_pct IS NULL
AND salary >=4000
AND salary <= 9000;

SELECT last_name,job_id,salary,commission_pct
FROM employees
WHERE ( job_id ='AC_MGR' OR job_id='MK_REP' ) 
AND commission_pct IS NULL
AND salary >=4000
AND salary <= 9000;

--////////////////////////////////////////////
-- 18. 정렬
SELECT employee_id,last_name,job_id,salary
FROM employees
ORDER BY salary DESC;

SELECT employee_id,last_name,job_id,salary
FROM employees
ORDER BY salary ASC;

SELECT employee_id,last_name,job_id,salary
FROM employees
ORDER BY salary; -- 기본은 오름차순

SELECT employee_id,last_name,job_id,salary as "월급"
FROM employees
ORDER BY 월급 DESC; -- 별칭 사용

SELECT employee_id,last_name,job_id,salary as "월급"
FROM employees
ORDER BY 4 DESC; -- select 문의 4번째 컬럼

SELECT employee_id,last_name as 이름,job_id,salary 
FROM employees
ORDER BY last_name ASC; --아스키코드로 정렬 (A:65 / B:66)

SELECT employee_id,last_name as 이름,job_id,salary 
FROM employees
ORDER BY 이름 ASC;

SELECT employee_id,last_name as 이름,job_id,salary 
FROM employees
ORDER BY 2 ASC;

SELECT employee_id,last_name,salary,hire_date as 입사일
FROM employees
ORDER BY hire_date DESC;

SELECT employee_id,last_name,salary,hire_date as 입사일
FROM employees
ORDER BY 입사일 DESC;

SELECT employee_id,last_name,salary,hire_date as 입사일
FROM employees
ORDER BY 4 DESC;

-- 다중 정렬
SELECT employee_id,last_name,salary,hire_date
FROM employees
ORDER BY salary DESC, hire_date;

SELECT employee_id,last_name,salary,hire_date
FROM employees
ORDER BY salary DESC, hire_date DESC;

SELECT employee_id,last_name,salary,hire_date
FROM employees
ORDER BY 3 DESC, 4;

-- null
SELECT employee_id,last_name,salary,hire_date,COMMISSION_PCT
FROM employees
ORDER BY COMMISSION_PCT desc; -- 오라클에서 null은 가장 큰 값으로 처리한다.

--////////////////////////////////////////////
-- 19. dual (dummy table)
SELECT 45*53
FROM dual;

SELECT SYSDATE
FROM dual;

-- 20. 단일행 함수 - 문자함수 
-- 1) INITCAP
SELECT INITCAP('ORACLE SQL') --Oracle Sql
FROM dual;

SELECT email, INITCAP(email)
FROM employees;

-- 2) UPPER
SELECT last_name, UPPER(last_name) as "어퍼!"
FROM employees;

SELECT last_name, salary
FROM employees
WHERE UPPER(last_name)='KING';

-- 3) LOWER
SELECT last_name, LOWER(last_name)
FROM employees;

-- 4) CONCAT
SELECT CONCAT( last_name, salary)
FROM employees;

SELECT last_name || salary
FROM employees;

-- 5) LENGTH
SELECT last_name, LENGTH(last_name)
FROM employees;

-- 6) INSTR (특정 문자 위치 반환, 없으면 0 반환)
SELECT INSTR('MILLER' , 'L', 1 , 2 ), INSTR('MILLER' , 'X', 1 , 2 )
FROM dual;

SELECT INSTR('MILLER' , 'L', 5 , 2 ), INSTR('MILLER' , 'X', 1 , 2 )
FROM dual;

-- 7) SUBSTR (부분열)
SELECT SUBSTR('900303-1234567' , 8 , 1 ) 
FROM dual;

SELECT SUBSTR('900303-1234567' , 8) 
FROM dual;

-- 8) REPLACE (치환)
SELECT REPLACE('JACK and JUE' , 'J' , 'BL' ) 
FROM dual;

-- 9) LPAD (왼쪽 채우기)
SELECT LPAD('MILLER' , 10 , '*' ) 
FROM dual;

-- 10) RPAD (오른쪽 채우기)
SELECT RPAD('MILLER' , 10 , '*' ) 
FROM dual;

-- 실습
--다음은 주민번호 ‘900303-1234567’를 보안상 이유로 
--‘900303-1******’ 포맷으로 출력하기 위해 사용 가능한 SQL문들이다.

-- 11) LTRIM (공백 및 특정 문자 삭제)
SELECT LTRIM('MILLER', 'M')
FROM dual;

SELECT LTRIM('MMMMILMLER', 'M') --ILMLER
FROM dual;

SELECT LTRIM('    MILLER    '), LENGTH(LTRIM('     MILLER     '))
FROM dual;

-- 12) RTRIM (공백 및 특정 문자 삭제)
SELECT RTRIM('MILLER', 'R')
FROM dual;

SELECT RTRIM('MILRLERRRRRR', 'R') --MILRLE
FROM dual;

SELECT RTRIM('    MILLER    '), LENGTH(LTRIM('     MILLER     ')) --삭제할 값을 지정하지 않으면 공백이 삭제됨.
FROM dual;

-- 13) TRIM (특정 문자 삭제 / 왼, 오, 양)
SELECT TRIM( '0' FROM '0001234567000' ) --기본값 both (양쪽)
FROM dual;

SELECT TRIM(LEADING '0' FROM '0001234567000' ) --1234567000
FROM dual;

SELECT TRIM(TRAILING '0' FROM '0001234567000' ) --0001234567
FROM dual;

-- 21. 수치 함수
-- 1) ROUND
SELECT ROUND( 456.789, 2 )  --456.79
FROM dual;

SELECT ROUND( 456.789, -1 ) --460 => .(소수점) = 0 자리 / 6 = -1자리
FROM dual;

SELECT ROUND( 456.789 )  --457
FROM dual;

-- 2) TRUNC
SELECT TRUNC( 456.789, 2 ) --456.78
FROM dual;

SELECT TRUNC( 456.789, -1 ) --450
FROM dual;

SELECT TRUNC( 456.789 ) --456
FROM dual;

-- 3) MOD , %연산자는 나머지 연산자로 사용 불가
SELECT MOD( 10 , 3 ) , MOD( 10 , 0 ) 
FROM dual;

-- 4) CEIL
SELECT CEIL(10.6), CEIL(-10.6) 
FROM dual;

-- 5) FLOOR
SELECT FLOOR(10.6), FLOOR(-10.6) 
FROM dual;

-- 6) SIGN
SELECT SIGN( 100 ) , SIGN(-20) , SIGN(0) 
FROM dual;


