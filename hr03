show user;

-- 제약조건 검색
select *
from user_constraints;

select *
from user_constraints
where table_name = 'EMPLOYEES'; --pk, fk 확인

select *
from user_constraints
where table_name = 'DEPARTMENTS'; --pk, fk 확인

-- 1. 오라클 조인

-- 1) inner 조인 , equi 조인 
SELECT last_name,department_name --앞에 테이블명을 생략한 경우는 유일한 컬럼명이라 식별 가능하기 때문
FROM employees, departments
WHERE employees.department_id = departments.department_id; --106개 값만 출력 (일치하는 데이터만 나옴)

SELECT employees.last_name,departments.department_name
FROM employees, departments
WHERE employees.department_id = departments.department_id;

-- 유일한 테이블명이 아닌 컬럼은 반드시 테이블명.컬럼명 형식으로 사용
SELECT last_name,department_name, employees.department_id
FROM employees, departments
WHERE employees.department_id = departments.department_id;

-- 테이블 별칭
SELECT emp.last_name,department_name, emp.department_id
FROM employees emp, departments dept
WHERE emp.department_id = dept.department_id;

-- 주의 : 별칭을 지정하면 반드시 별칭을 사용해야 된다. 테이블명 사용불가
SELECT employees.last_name,department_name, employees.department_id
FROM employees emp, departments dept
WHERE emp.department_id = dept.department_id;

-- 오라클 조인은 where 절에 조인조건과 검색조건을 같이 지정한다.
-- 연결 + 필터링 + where 절에도 반드시 별칭 사용.
SELECT emp.last_name,salary,department_name 
FROM employees emp, departments dept
WHERE emp.department_id = dept.department_id
AND last_name='Whalen';

SELECT emp.last_name,salary,department_name 
FROM employees emp, departments dept
WHERE emp.department_id = dept.department_id
AND emp.department_id = 90;

-- 기존 문법 모두 사용 가능
SELECT d.department_name 부서명, COUNT(e.employee_id) 인원수
FROM employees e, departments d
WHERE e.department_id = d.department_id
AND TO_CHAR( hire_date , 'YYYY') <= 2005
GROUP BY d.department_name
order by 2;

-- 2) non-equi 조인 (employees , job_grade 조인)
SELECT last_name, salary, grade_level
FROM employees e, job_grades g
WHERE e.salary BETWEEN g.lowest_sal AND g.highest_sal;

-- 3개 테이블 조인(n-1)
SELECT last_name, salary, department_name, grade_level
FROM employees e, departments d, job_grades g
WHERE e.department_id = d.department_id
AND e.salary BETWEEN g.lowest_sal AND g.highest_sal;

-- 3) self 조인
-- 사원 가상테이블 생성
select employee_id, last_name, manager_id
from employees e;

--매니저 가상테이블 생성
select employee_id, last_name
from employees m;

SELECT e.last_name 사원명, m.last_name 관리자명 
FROM employees e, employees m
WHERE e.manager_id = m.employee_id;

-- 질문 : 사원명(e), 관리자명(m), 관리자의 관리자명(m2) 출력
-->> 관리자의 관리자 찾기
SELECT e.last_name 사원명, m.last_name 관리자명 , m2.last_name 관리자의관리자명
FROM employees e, employees m, employees m2
WHERE e.manager_id = m.employee_id
AND m.manager_id = m2.employee_id;

-- 4) outer 조인
SELECT emp.first_name,department_name, emp.department_id
FROM employees emp, departments dept
WHERE emp.department_id = dept.department_id(+);

SELECT e.last_name 사원명, m.last_name 관리자명 
FROM employees e, employees m
WHERE e.manager_id = m.employee_id(+);

SELECT e.last_name 사원명,
 m.last_name 관리자명, mm.last_name "관리자의 관리자명" 
FROM employees e, employees m , employees mm
WHERE e.manager_id = m.employee_id(+) 
AND m.manager_id = mm.employee_id(+);

-- 5)cartesian product 조인 (107행*27행)
SELECT last_name, department_name, employees.EMPLOYEE_ID
FROM employees, departments;

-- 2. ANSI 조인
-- 1) NATURAL JOIN --> 공통 컬럼은 테이블명.컬럼 또는 별칭.컬럼 사용 불가
SELECT e.last_name,d.department_name, department_id
FROM employees e NATURAL JOIN departments d; 

SELECT last_name,department_name, department_id
FROM employees e NATURAL JOIN departments d --조인 조건
WHERE department_id=90;                     --검색 조건

-- 2) USING JOIN --> 공통 컬럼은 테이블명.컬럼 또는 별칭.컬럼 사용 불가
SELECT last_name,department_name, department_id
FROM employees e JOIN departments d USING(department_id);

SELECT last_name,department_name, department_id
FROM employees e INNER JOIN departments d USING(department_id);

SELECT last_name,department_name, department_id
FROM employees e INNER JOIN departments d USING(department_id) --조인 조건
where department_id = 90;                                      --검색 조건

-- 3) ON JOIN --> 조인 조건을 명시했기 때문에 공통 컬럼 테이블명.컬럼 또는 별칭.컬럼 사용
SELECT last_name,department_name, e.department_id
FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

SELECT last_name,department_name, d.department_id
FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
where d.department_id = 90;

-- 오라클 조인
SELECT last_name, salary, grade_level
FROM employees e, job_grades g
WHERE e.salary BETWEEN g.lowest_sal AND g.highest_sal;
-- ANSI 조인으로 변경
SELECT last_name, salary, grade_level
FROM employees e INNER JOIN job_grades g ON e.salary BETWEEN g.lowest_sal AND g.highest_sal;

-- 4) self 조인
SELECT e.last_name 사원명, m.last_name 관리자명 
FROM employees e JOIN employees m ON e.manager_id = m.employee_id;

-- n개 테이블 조인
SELECT e.last_name 사원명, m.last_name 관리자명, m2.last_name 관리자의관리자명 
FROM employees e JOIN employees m ON e.manager_id = m.employee_id 
                 JOIN employees m2 ON m.manager_id = m2.employee_id;

SELECT e.last_name 사원명, d.department_name 부서명, g.grade_level 등급
FROM employees e INNER JOIN departments d USING(department_id)
                 INNER JOIN job_grades g ON e.salary BETWEEN g.lowest_sal AND g.highest_sal;

SELECT e.last_name 사원명, d.department_name 부서명, g.grade_level 등급
FROM employees e INNER JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
                 INNER JOIN job_grades g ON e.salary BETWEEN g.lowest_sal AND g.highest_sal;
                 
-- 5) cross 조인
SELECT last_name,department_name,e.department_id
FROM employees e CROSS JOIN departments d;

-- 6) outer 조인
-- 인출행 106개 / null값을 가진 사원 한명이 제외됨
SELECT last_name,department_name, department_id
FROM employees e INNER JOIN departments d USING(department_id);

-- 인출행 107개 / department_id null값 가진 사원도 반환
SELECT last_name,department_name, department_id
FROM employees e LEFT OUTER JOIN departments d USING(department_id);

SELECT last_name,department_name, department_id
FROM departments d RIGHT OUTER JOIN employees e USING(department_id);

SELECT last_name,department_name, department_id
FROM departments d FULL OUTER JOIN employees e USING(department_id);

SELECT last_name,department_name, d.department_id
FROM employees e LEFT OUTER JOIN departments d ON e.department_id = d.department_id;

-- 3. 서브쿼리
-- 1) 단일행 연산자
SELECT salary
FROM employees
WHERE last_name='Whalen'; --4400

SELECT last_name,salary
FROM employees
WHERE salary >= 4400; --61행

-- main query
SELECT last_name,salary
FROM employees
WHERE salary >= (select salary --sub query : 반드시 괄호를 갖는다.
                 from employees
                 where last_name = 'Whalen'); --61행
                 
-- 사원들의 평균 월급보다 더 많은 월급을 받는 사원을 조회하는 SQL문
select last_name, salary
from employees
where salary > (select avg(salary) from employees);

--다음은 부서번호가 100인 사원들 중에서 최대 월급을 받는 사원과 동일한 월급을 받는 사원을 조회
select max(salary)
from EMPLOYEES
where DEPARTMENT_ID = 100;

select *
from employees
where salary = 12008;

select *
from employees
where salary = (select max(salary)
from EMPLOYEES
where DEPARTMENT_ID = 100);

SELECT department_id, MAX(salary)
FROM employees
GROUP BY department_id
HAVING MAX(salary) > (SELECT MAX(salary)
                      FROM employees
                      WHERE department_id=100 );
 
 -- 2) 복수행 연산자
 -- IN
SELECT last_name, salary
FROM employees
WHERE salary IN ( SELECT salary
                  FROM employees
                  WHERE last_name IN ('Whalen','Fay') );

-- > ALL
SELECT last_name, department_id, salary
FROM employees
WHERE salary > ALL(SELECT salary
               FROM employees
               WHERE job_id = 'IT_PROG');
               
SELECT last_name, department_id, salary               
FROM employees
WHERE salary > (SELECT max(salary)
               FROM employees
               WHERE job_id = 'IT_PROG');
               
-- < ALL
SELECT last_name, department_id, salary
FROM employees
WHERE salary < ALL(SELECT salary
               FROM employees
               WHERE job_id = 'IT_PROG');
               
SELECT last_name, department_id, salary               
FROM employees
WHERE salary < (SELECT min(salary)
                FROM employees
                WHERE job_id = 'IT_PROG');
                
-- > ANY : 서브쿼리의 최소값보다 큰 메인쿼리 조회
SELECT last_name, department_id, salary
FROM employees
WHERE salary > ANY (SELECT salary
                    FROM employees
                    WHERE job_id = 'IT_PROG');
                    
SELECT last_name, department_id, salary
FROM employees
WHERE salary > (SELECT min (salary)
                    FROM employees
                    WHERE job_id = 'IT_PROG');
                    
-- < ANY
SELECT last_name, department_id, salary
FROM employees
WHERE salary < ANY (SELECT salary
                    FROM employees
                    WHERE job_id = 'IT_PROG');
                    
SELECT last_name, department_id, salary
FROM employees
WHERE salary < (SELECT max (salary)
                    FROM employees
                    WHERE job_id = 'IT_PROG');
                    
-- EXISTS : 메인 쿼리를 실행할지 말지를 결정
SELECT last_name, department_id, salary
FROM employees
WHERE EXISTS (SELECT employee_id
              FROM employees
              WHERE commission_pct IS NOT NULL);
              
-- 서브쿼리에 결과가 없도록 설정 -> 메인쿼리 작동 x
SELECT last_name, department_id, salary
FROM employees
WHERE EXISTS (SELECT employee_id
              FROM employees
              WHERE salary < -100);    
              
-- 다중 컬럼 서브쿼리
-- pair로 정확히 일치하면 반환
SELECT last_name, department_id, salary
FROM employees
WHERE (department_id, salary) IN ( SELECT department_id, MAX(salary)
                                   FROM employees
                                  GROUP BY department_id )
ORDER BY 2;

-- in-line view
SELECT e.department_id , SUM(salary) 합계, AVG(salary) 평균, COUNT(*) 인원수
FROM employees e , departments d
WHERE e.department_id = d.department_id
GROUP BY e.department_id
ORDER BY 1;

SELECT e.department_id, 합계, 평균, 인원수
FROM ( SELECT department_id, SUM(salary) 합계, AVG(salary) 평균 , COUNT(*) 인원수 
       FROM employees
       GROUP BY department_id ) e, departments d
WHERE e.department_id = d.department_id
ORDER By 1;
