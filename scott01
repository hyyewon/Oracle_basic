show user;

-- DML
-- 1. 단일행 insert
-- 컬럼명 지정
INSERT INTO dept( deptno, dname, loc )
VALUES ( 50 ,'개발','서울');

INSERT INTO dept( deptno, dname ) --지정하지 않은 컬럼에는 not null제약조건이 없다면! null값이 삽입됨
VALUES ( 51 ,'개발');

-- 컬럼명 미지정
INSERT INTO dept
VALUES ( 60 ,'인사','경기');

INSERT INTO dept
VALUES ( 60 ,'인사'); --error발생 ("not enough values")

-- 메모리에만 있던 새로운 값이 파일에 반영 / 다른 사용자도 새로 입력된 값을 포함한 테이블을 볼 수 있음
commit;

-- 명시적인 null삽입
INSERT INTO dept(deptno, dname , loc )
VALUES ( 80 ,'인사', NULL );

select *
from dept;

-- 2. 복수행 insert 컬럼 삽입
-- 1) 새로운 테이블 생성 
SELECT * FROM dept
WHERE 1=2; -- 구조만 보여줘

CREATE TABLE mydept
AS
SELECT * FROM dept
WHERE 1=2; -- 구조만 만들게

CREATE TABLE mydept10
AS
SELECT * FROM dept; --데이터 포함해서 만들게

-- mydept
select *
from mydept;

-- 단일 테이블의 복수행 insert문
insert into mydept
select deptno, dname, loc
from dept;
commit;

-- 3. 복수행 테이블에 복수행 insert
-- 1) 무조건 insert all
CREATE TABLE myemp_hire
AS
SELECT empno,ename,hiredate,sal
FROM emp
WHERE 1=2; -- 구조만 빌려서 새로운 테이블 만들게

CREATE TABLE myemp_mgr
AS
SELECT empno,ename,mgr
FROM emp
WHERE 1=2;

select *
from myemp_hire;

select *
from myemp_mgr;

INSERT ALL
INTO myemp_hire VALUES ( empno,ename,hiredate,sal )
INTO myemp_mgr VALUES ( empno,ename,mgr )
SELECT empno,ename,hiredate,sal,mgr
FROM emp;

commit;

-- 2) 조건 insert all
CREATE TABLE myemp_hire2
AS
SELECT empno,ename,hiredate,sal
FROM emp
WHERE 1=2;

CREATE TABLE myemp_mgr2
AS
SELECT empno,ename,mgr,sal
FROM emp
WHERE 1=2;

select *
from myemp_hire2;

select *
from myemp_mgr2;

INSERT ALL
WHEN sal = 800 THEN --800은 2500보다 작기 때문에 2개의 테이블 모두에 삽입됨
 INTO myemp_hire2 VALUES ( empno,ename,hiredate,sal )
WHEN sal < 2500 THEN
 INTO myemp_mgr2 VALUES ( empno,ename,mgr,sal )
SELECT empno,ename,hiredate,sal,mgr
FROM emp;

-- 3) insert first (조건에 처음 만족한 테이블에만 저장)
CREATE TABLE myemp_hire3
AS
SELECT empno,ename,hiredate,sal
FROM emp
WHERE 1=2;

CREATE TABLE myemp_mgr3
AS
SELECT empno,ename,mgr,sal
FROM emp
WHERE 1=2;

INSERT first
WHEN sal = 800 THEN 
 INTO myemp_hire3 VALUES ( empno,ename,hiredate,sal )
WHEN sal < 2500 THEN
 INTO myemp_mgr3 VALUES ( empno,ename,mgr,sal )
SELECT empno,ename,hiredate,sal,mgr
FROM emp;

select *
from myemp_hire3;

select *
from myemp_mgr3; --800저장 안됨 / 조건이 만족하더라도 조건에 처음 만족한 테이블이 아니므로 저장x

-- 2. update
select *
from mydept;

update mydept
set dname = '영업', loc = '경기'
where deptno = 50;
commit;

update mydept
set dname = '영업', loc = '경기'; --모든 레코드가 바뀜
rollback;

-- update + subquery
UPDATE mydept
SET dname= ( SELECT dname
             FROM dept
             WHERE deptno = 10)
 ,loc= ( SELECT loc
         FROM dept
         WHERE deptno=20)
WHERE deptno = 60;
commit;

-- 3. delete
-- where절 있는
DELETE FROM mydept
WHERE deptno = 50;

select *
from mydept;

-- where절 없는
DELETE FROM mydept;
rollback;

-- delete + subquery
DELETE 
FROM mydept
WHERE loc = (SELECT loc
             FROM dept
             WHERE deptno = 20);
commit;

-- 트랜잭션 무한대기

--//////////////////////////////////////////////////////////////
--DDL
--한글  byte 확인
select *
from NLS_DATABASE_PARAMETERS
where parameter = 'NLS_CHARACTERSET';

--스키마 (생략하면 내 안에서 찾음) 
select *
from hr.employees; --관리자 빼놓고는 권한이 없어서 접근x

-- 1. create
-- 1) 방법1
-- 제약조건이 없기 때문에 모든 컬럼에 중복 가능하고 null 가능
-- 저장할 때 컬럼명을 명시하지 않는 컬럼은 자동으로 null 저장
CREATE TABLE scott.employee
( empno NUMBER(4),
 ename VARCHAR2(20),
 hiredate DATE, 
 sal NUMBER(7,2));

CREATE TABLE employee10
( empno NUMBER(4),
 ename VARCHAR2(20),
 hiredate DATE,
 sal NUMBER(7,2));

-- 2) 방법2 (defualt값 지정)
CREATE TABLE employee2
( empno NUMBER(4),
 ename VARCHAR2(20),
 hiredate DATE DEFAULT SYSDATE,
 sal NUMBER(7,2));
 
INSERT INTO employee2 ( empno,ename,sal)
VALUES ( 10, '홍길동',3000); -- date는 기본값이라 자동 저장됨

select *
from employee2;

-- 제약조건
-- 1) 컬럼 레벨의 primary key 제약조건타입 지정
CREATE TABLE department
( deptno NUMBER(2) CONSTRAINT department_deptno_pk PRIMARY KEY, --deptno는 not null / unique 특징을 갖는다.
 dname VARCHAR2(15),
 loc VARCHAR2(15) );
 
 CREATE TABLE department10
( deptno NUMBER(2) PRIMARY KEY,
 dname VARCHAR2(15),
 loc VARCHAR2(15) );
 
-- 제약조건 확인
select *
from user_constraints
where table_name = 'DEPARTMENT10'; --SYS_C007061


-- 2) 테이블 레벨의 primary key 제약조건타입 지정
CREATE TABLE department2
( deptno NUMBER(2), 
 dname VARCHAR2(15),
 loc VARCHAR2(15) ,
 CONSTRAINT department2_deptno_pk PRIMARY KEY(deptno) 
);

CREATE TABLE department3
( deptno NUMBER(2), 
 dname VARCHAR2(15),
 loc VARCHAR2(15) ,
 CONSTRAINT department3_deptno_pk PRIMARY KEY(deptno, loc)-- 복합컬럼은 테이블 레벨만 가능.
);

select *
from user_constraints
where table_name = 'DEPARTMENT3'; 

-- 3) 컬럼 레벨의 unique key 제약조건타입 지정
CREATE TABLE department4
( deptno NUMBER(2) CONSTRAINT department4_deptno_pk PRIMARY KEY, --unique, not null
 dname VARCHAR2(15) CONSTRAINT department4_dname_uk UNIQUE,      --unique, null허용
 loc VARCHAR2(15) );

insert into department4 ( deptno, dname, loc) values (1, 'aa', 'bb');
insert into department4 ( deptno, dname, loc) values (2, null, 'bb');

-- 4) 테이블 레벨의 unique key 제약조건타입 지정
CREATE TABLE department11
( deptno NUMBER(2),
 dname VARCHAR2(15), 
 loc VARCHAR2(15),
 CONSTRAINT department11_depno_pk PRIMARY KEY(deptno),
 CONSTRAINT department11_dname_uk UNIQUE(dname)
);

-- 혼합
CREATE TABLE department5
( deptno NUMBER(2) CONSTRAINT department5_deptno_pk PRIMARY KEY,
 dname VARCHAR2(15), 
 loc VARCHAR2(15),
 CONSTRAINT department5_dname_uk UNIQUE(dname)
);

-- 5) 컬럼 레벨의 not null 제약조건타입 지정
-- 테이블 레벨에서는 지원x
CREATE TABLE department6
( deptno NUMBER(2) CONSTRAINT department6_deptno_pk PRIMARY KEY,
 dname VARCHAR2(15) CONSTRAINT department6_dname_uk UNIQUE,
 loc VARCHAR2(15) CONSTRAINT department6_loc_nn NOT NULL);
 
CREATE TABLE department12
( deptno NUMBER(2),
 dname VARCHAR2(15),
 loc VARCHAR2(15) CONSTRAINT department12_loc_nn NOT NULL,
  CONSTRAINT department12_deptno_pk PRIMARY KEY (deptno),
  CONSTRAINT department12_dname_uk UNIQUE (dname)
  );
 
-- 6) 컬럼 레벨의 check 제약조건타입 지정
CREATE TABLE department7
( deptno NUMBER(2) ,
 dname VARCHAR2(15) CONSTRAINT department7_dname_ck CHECK( dname IN('개발','인사')) ,
 loc VARCHAR2(15) 
);

insert into department7 (deptno, dname, loc) values (1, '개발', 'bb');
insert into department7 (deptno, dname, loc) values (2, '인사', 'bb');

insert into department7 (deptno, dname, loc) values (3, '관리', 'bb'); --에러, dname에는 개발이나 인사만 저장가능하도록 제약 설정해놨기 때문.

-- 7) 테이블 레벨의 check 제약조건타입 지정
CREATE TABLE department8
( deptno NUMBER(2) ,
 dname VARCHAR2(15),
 loc VARCHAR2(15),
CONSTRAINT department8_dname_ck CHECK( dname IN('개발','인사')) 
);

-- 8) FK 실습
-- 컬럼 레벨로 fk키 만드는 방법

--master 테이블 생성
create table m1
( no NUMBER(2) CONSTRAINT m1_no_pk PRIMARY KEY, -값, 중복x
  name VARCHAR2(10) );

insert into m1 (no, name) values (10, 'aa');
insert into m1 (no, name) values (20, 'bb');
insert into m1 (no, name) values (30, 'cc');
commit;

select *
from m1;

-- slave 테이블 생성
create table s1
( num NUMBER(4) CONSTRAINT s1_num_pk PRIMARY KEY,
  email VARCHAR2(20),
  --fk 작업
  no NUMBER(2) CONSTRAINT s1_no_fk REFERENCES m1(no)
  );

insert into s1 (num, email, no) values (100, 'xxx', 10); --fk는 참조하고 있는 컬럼의 값이나 null값을 가질 수 있음
insert into s1 (num, email, no) values (200, 'xxx2', 20);
insert into s1 (num, email, no) values (300, 'xxx3', 30);
insert into s1 (num, email, no) values (400, 'xxx4', null);

insert into s1 (num, email, no) values (500, 'xxx5', 40); --error "parent key not found"

-- 테이블 레벨로 fk키 만드는 방법
-- master table
create table m2
( no NUMBER(2) CONSTRAINT m2_no_pk PRIMARY KEY,
  name VARCHAR2(10) );
  
insert into m2 (no, name) values (10, 'aa');
insert into m2 (no, name) values (20, 'bb');
insert into m2 (no, name) values (30, 'cc');

--slave table
create table s2
( num NUMBER(4) CONSTRAINT s2_num_pk PRIMARY KEY,
  email VARCHAR2(20),
  no NUMBER(2),
  
  --fk 작업
  CONSTRAINT s2_no_fk FOREIGN KEY (no) REFERENCES m2 (no)
  );
insert into s2 (num, email, no) values (100, 'xxx', 10); --fk는 참조하고 있는 컬럼의 값이나 null값을 가질 수 있음
insert into s2 (num, email, no) values (200, 'xxx2', 20);
insert into s2 (num, email, no) values (300, 'xxx3', 30);
insert into s2 (num, email, no) values (400, 'xxx4', null);

insert into s2 (num, email, no) values (500, 'xxx5', 40);

--//////////////////////////////////////////////////////////
-- 1. FK 이슈 : slave가 master의 값을 삭제할 수 없다.
delete from m1
where no = 10;

-- ON DELETE CASCADE : 마스터 레코드 삭제  => 슬래이브 레코드도 삭제
-- create master table
create table m3
( no NUMBER(2) CONSTRAINT m3_no_pk PRIMARY KEY,
  name VARCHAR2(10) );
  
insert into m3 (no, name) values (10, 'aa');
insert into m3 (no, name) values (20, 'bb');
insert into m3 (no, name) values (30, 'cc');

-- create slave table
create table s3
( num NUMBER(4) CONSTRAINT s3_num_pk PRIMARY KEY,
  email VARCHAR2(20),
  --fk 작업
  no NUMBER(2) CONSTRAINT s3_no_fk REFERENCES m3(no) ON DELETE CASCADE
  );

insert into s3 (num, email, no) values (100, 'xxx', 10); --fk는 참조하고 있는 컬럼의 값이나 null값을 가질 수 있음
insert into s3 (num, email, no) values (200, 'xxx2', 20);
insert into s3 (num, email, no) values (300, 'xxx3', 30);
insert into s3 (num, email, no) values (400, 'xxx4', null);
commit;

select *
from m3;

select *
from s3;

delete from m3
where no=10;

-- ON DELETE SET NULL : 마스터 레코드 삭제  => 마스터 값 NULL 로 바뀜
-- create master table
create table m4
( no NUMBER(2) CONSTRAINT m4_no_pk PRIMARY KEY,
  name VARCHAR2(10) );
  
insert into m4 (no, name) values (10, 'aa');
insert into m4 (no, name) values (20, 'bb');
insert into m4 (no, name) values (30, 'cc');

-- create slave table
create table s4
( num NUMBER(4) CONSTRAINT s4_num_pk PRIMARY KEY,
  email VARCHAR2(20),
  --fk 작업
  no NUMBER(2) CONSTRAINT s4_no_fk REFERENCES m4(no) ON DELETE SET NULL
  );

insert into s4 (num, email, no) values (100, 'xxx', 10); --fk는 참조하고 있는 컬럼의 값이나 null값을 가질 수 있음
insert into s4 (num, email, no) values (200, 'xxx2', 20);
insert into s4 (num, email, no) values (300, 'xxx3', 30);
insert into s4 (num, email, no) values (400, 'xxx4', null);
commit;

select *
from s4;

select *
from s4;

delete from s4
where no=10;

-- DROP :테이블 삭제
DROP TABLE mydept;
drop table mydept10;

drop table m1; --error "referenced by foreign keys"

---s1 제약조건 확인
select*
from user_constraints
where table_name = 'S1';

--s1의 fk 제약조건을 삭제
drop table m1 cascade constraints;
